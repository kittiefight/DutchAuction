const Token = artifacts.require("Token");
const DutchWrapper = artifacts.require("DutchWrapper");

const { should, EVMThrow, getParamFromTxEvent } = require('./helpers');

let kittieFightToken = null;
let dutchWrapper = null;


contract('DutchWrapper', function (accounts) {

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    before('Setup contract for each test', async function () {
        kittieFightToken =  await Token.deployed(); 
        dutchWrapper = await DutchWrapper.deployed(); 
        accounts_num = accounts.length;
    })

    it('Dutch Action Banalance Should eqeual 5 m ', async function () {
        const dutcActionTokenBalance =  await kittieFightToken.balanceOf(DutchAuction.address);
        console.log('dutcActionTokenBalance : ', dutcActionTokenBalance / 10**18 );
        //console.log('dutcActionTokenBalance : ', dutcActionTokenBalance.toNumber());
    });

    it('Should getAuctionStage ', async function() {
    	const auctionStage = await dutchAuction.stage();
    	assert.equal(2, auctionStage.toNumber() );
    });

    it('Should Bid ', async function() {
    	console.log('Address : ', accounts[1]);
    	await dutchAuction.bid(accounts[1],{  from : accounts[1], value : 1*10**18 });
        //await dutchAuction.bid(accounts[2],{  from : accounts[1], value : 0.5*10**18 });
        //await dutchAuction.bid(accounts[3],{  from : accounts[1], value : 0.5*10**18 });
    });


    it.skip('Should  bid every account', async function () {
        console.log('==================================================');

        for (let i = 0; i < accounts_num; i++) {
            var val2 = await dutchAuction.bid(accounts[i], { from: accounts[i],value:10*10**18});
            console.log(" Bid from Account[" + i + "]. Tx= "+  val2.tx);
        }
        console.log('\n');


        val = await dutchAuction.stage();
        console.log("Stage= "+val);
        await sleep(2000);


        var val = await kittieFightToken.balanceOf(dutchAuction.address);
        console.log("dutchAuction contract tokens count = "+val);

        var stage = await dutchAuction.stage();
        console.log("Stage= "+stage);

        assert.equal(stage==2 || stage==3 , true);
    });

    it.skip('Should claim every account', async function () {
        //should run testrpc with 50 accounts
        //set WAITING_PERIOD to 0 days
        console.log('==================================================');

        for (i = 0; i < accounts_num; i++) {
            await dutchAuction.claimTokens(accounts[i]);
            val = await kittieFightToken.balanceOf(accounts[i]);
           console.log(" Account[" + i + "] Token Balance =" + val/ 10**18);

       }
       var stage = await dutchAuction.stage();
       console.log("Stage= "+stage);


        assert.equal(stage, 4);
    });

});

